#define DEVICE_NAME "envSensor"

#define WIFI_PASSWORD "noMoreMo7d"

#define UPDATE_FREQUENCY 5000

// You only need to format the filesystem once
//#define FORMAT_FILESYSTEM true
#define FORMAT_FILESYSTEM false

#define HTTP_PORT 80

// Auto Generated
#include <ESP8266WiFi.h>
#include <DNSServer.h>
#include <ESP8266WiFiMulti.h>
#include <ESPAsync_WiFiManager.h>
#include <ArduinoJson.h>
#include <LittleFS.h>

#define MIN_AP_PASSWORD_SIZE 8

#define SSID_MAX_LEN 32
#define PASS_MAX_LEN 64

ESP8266WiFiMulti wifiMulti;

typedef struct
{
    char wifi_ssid[SSID_MAX_LEN];
    char wifi_pw[PASS_MAX_LEN];
} WiFi_Credentials;

WiFi_Credentials wifiCredentials;

#define CONFIG_FILENAME F("/wifi_cred.dat")

#define MQTT_SERVER_MAX_LEN 40
#define MQTT_SERVER_PORT_LEN 6

char mqtt_server[MQTT_SERVER_MAX_LEN];
char mqtt_port[MQTT_SERVER_PORT_LEN] = "1883";

AsyncWebServer webServer(HTTP_PORT);
DNSServer dnsServer;

char configFileName[] = "/config.json";

// Indicates whether ESP has WiFi credentials saved from previous session, or double reset detected
bool initialConfig = false;

// SSID and PW for your Router
String Router_SSID;
String Router_Pass;

bool loadFileFSConfigFile(void)
{
    //clean FS
    if (FORMAT_FILESYSTEM)
    {
        Serial.println("Formatting FS");
        LittleFS.format();
    }

    //read configuration from FS json

    if (LittleFS.begin())
    {
        if (LittleFS.exists(configFileName))
        {
            Serial.println("File " + String(configFileName) + " exists. Loading file.");

            //file exists, reading and loading
            File configFile = LittleFS.open(configFileName, "r");

            if (configFile)
            {
                Serial.println("Loaded config file. Now copying it to memory.");
                size_t configFileSize = configFile.size();

                // Allocate a buffer to store contents of the file.
                std::unique_ptr<char[]> buf(new char[configFileSize + 1]);

                configFile.readBytes(buf.get(), configFileSize);

                DynamicJsonDocument json(1024);
                auto deserializeError = deserializeJson(json, buf.get(), configFileSize);

                if (deserializeError)
                {
                    Serial.println("Error deserializing config JSON.");
                    return false;
                }
                else
                {
                    if (json["mqtt_server"])
                        Serial.println("Copying mqtt_server from config file.");
                        strncpy(mqtt_server, json["mqtt_server"], sizeof(mqtt_server));

                    if (json["mqtt_port"])
                        Serial.println("Copying mqtt_port from config file.");
                        strncpy(mqtt_port, json["mqtt_port"], sizeof(mqtt_port));
                }

                serializeJsonPretty(json, Serial);
                configFile.close();
            }
        }
        else
        {
            Serial.println(String(configFileName) + " doesn't exist but should. That's strange.");
        }
    }
    else
    {
        Serial.println("No file System yet.");
        return false;
    }
    return true;
}

bool saveFileFSConfigFile(void)
{
    Serial.println("saving config file");
    DynamicJsonDocument json(1024);

    json["mqtt_server"] = mqtt_server;
    json["mqtt_port"] = mqtt_port;

    File configFile = LittleFS.open(configFileName, "w");

    if (!configFile)
    {
        Serial.println("Failed to open config file for writing.");
    }

    serializeJsonPretty(json, Serial);
    // Write data to file and close it
    serializeJson(json, configFile);

    configFile.close();
    //end save
}

void loadConfigData(void)
{
    Serial.println("Trying to load wifi config data.");
    File file = LittleFS.open(CONFIG_FILENAME, "r");
    LOGERROR(F("LoadWiFiCfgFile "));

    if (file)
    {
        Serial.println("Opened file. Now reading.");
        file.readBytes((char *)&wifiCredentials, sizeof(wifiCredentials));
        file.close();
        LOGERROR(F("OK"));
    }
    else
    {
        Serial.println("Failed to open file.");
        LOGERROR(F("failed"));
    }
}

void saveConfigData(void)
{
    Serial.println("Saving wifi config.");
    File file = LittleFS.open(CONFIG_FILENAME, "w");
    LOGERROR(F("SaveWiFiCfgFile "));

    if (file)
    {
        Serial.println("Found file. Now saving wifi config.");
        file.write((uint8_t *)&wifiCredentials, sizeof(wifiCredentials));
        file.close();
        LOGERROR(F("OK"));
    }
    else
    {
        Serial.println("Failed to save file.");
        LOGERROR(F("failed"));
    }
}

//flag for saving data
bool shouldSaveConfig = false;

//callback notifying us of the need to save config
void saveConfigCallback(void)
{
    Serial.println("Set flag to save config");
    shouldSaveConfig = true;
}

void setup()
{
    Serial.begin(115200);

    loadFileFSConfigFile();

//    ESPAsync_WMParameter custom_mqtt_server("mqtt_server", "mqtt_server", mqtt_server, MQTT_SERVER_MAX_LEN + 1);
//    ESPAsync_WMParameter custom_mqtt_port("mqtt_port", "mqtt_port", mqtt_port, MQTT_SERVER_PORT_LEN + 1);

    String apName = DEVICE_NAME + String("_") + String(ESP.getChipId(), HEX);
    const char *password = WIFI_PASSWORD;

    Serial.println("==========");
    Serial.println("AP Name: " + apName);
    Serial.println("AP Password: " + String(password));
    Serial.println("==========");

    ESPAsync_WiFiManager wifiManager(&webServer, &dnsServer, apName.c_str());

    //set config save notify callback
    wifiManager.setSaveConfigCallback(saveConfigCallback);

 //   wifiManager.addParameter(&custom_mqtt_server);
 //   wifiManager.addParameter(&custom_mqtt_port);

    wifiManager.setConfigPortalChannel(0);

    Router_SSID = wifiManager.WiFi_SSID();
    Router_Pass = wifiManager.WiFi_Pass();

    if (Router_SSID != "")
    {
        Serial.println("Found a Router SSID, setting config timeout to 2 min before setting up a portal.");
        wifiManager.setConfigPortalTimeout(120); //If no access point name has been previously entered disable timeout.
    }

    if ((Router_SSID == "") || (Router_Pass == ""))
    {
        Serial.println("No Router SSID or no Password found, starting portal now.");
        wifiManager.startConfigPortal(apName.c_str(), password);
        String tempSSID = wifiManager.getSSID();
        String tempPW = wifiManager.getPW();

        Serial.println("User input SSID: " + tempSSID);
        strcpy(wifiCredentials.wifi_ssid, tempSSID.c_str());

        Serial.println("User input Password length: "+ tempPW.length());
        strcpy(wifiCredentials.wifi_pw, tempPW.c_str());

        // Don't permit NULL SSID and password len < MIN_AP_PASSWORD_SIZE (8)
        if ((String(wifiCredentials.wifi_ssid) != "") && (strlen(wifiCredentials.wifi_pw) >= MIN_AP_PASSWORD_SIZE))
        {
            Serial.println("Either SSID was empty or password was too short.");
            LOGERROR3(F("* Add SSID = "), wifiCredentials.wifi_ssid, F(", PW = "), wifiCredentials.wifi_pw);
        }

        Serial.println("saving WiFi config data");
        saveConfigData();
    }
    
//    strncpy(mqtt_server, custom_mqtt_server.getValue(), sizeof(mqtt_server));
//    strncpy(mqtt_port, custom_mqtt_port.getValue(), sizeof(mqtt_port));
    
    if (shouldSaveConfig)
    {
        Serial.println("Saving additional parameters.");
        saveFileFSConfigFile();
    }
}

void loop()
{
}